{"version":3,"file":"central-config-a0a861d2.js","sources":["../../src/central-config.ts"],"sourcesContent":["// Central OAuth Configuration\n// This file contains the centralized settings for streamlined OAuth\n\nexport const CENTRAL_OAUTH_CONFIG = {\n\t// Replace this with your actual centralized Kick application Client ID\n\t// This should be a single application that all streamers will use\n\tCLIENT_ID: import.meta.env.VITE_CENTRAL_CLIENT_ID || import.meta.env.CENTRAL_CLIENT_ID || 'YOUR_CENTRAL_CLIENT_ID_HERE',\n\t\n\t// OAuth settings\n\tOAUTH_SETTINGS: {\n\t\tresponse_type: 'code', // Using authorization code flow with PKCE\n\t\tscope: 'chat:read chat:write user:read channel:read',\n\t\tauthorize_url: import.meta.env.VITE_KICK_OAUTH_BASE_URL || 'https://id.kick.com/oauth/authorize',\n\t\ttoken_url: import.meta.env.VITE_KICK_TOKEN_URL || 'https://id.kick.com/oauth/token',\n\t\tapi_base: import.meta.env.VITE_KICK_API_BASE_URL || 'https://kick.com/api/v2',\n\t\tproxy_url: (() => {\n\t\t\t// Check if we're running on localhost (development environment)\n\t\t\tconst isLocalhost = window.location.hostname === 'localhost';\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// Use local proxy server for localhost development\n\t\t\t\treturn import.meta.env.VITE_OAUTH_PROXY_URL_DEV || 'http://localhost:3001';\n\t\t\t} else {\n\t\t\t\t// Use Netlify functions for deployed environment\n\t\t\t\treturn import.meta.env.VITE_OAUTH_PROXY_URL_PROD || `${window.location.origin}/.netlify/functions`;\n\t\t\t}\n\t\t})()\n\t},\n\t\n\t// Default game settings that streamers can override\n\tDEFAULT_GAME_SETTINGS: {\n\t\tgravity: 400,\n\t\tgravity_chute: 60,\n\t\tmax_velocity: 600,\n\t\twait: 60\n\t},\n\t\n\t// UI Configuration\n\tUI_CONFIG: {\n\t\ttheme: {\n\t\t\tprimary_color: '#00ff88',\n\t\t\tsecondary_color: '#9146ff',\n\t\t\tgradient: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'\n\t\t},\n\t\tmessages: {\n\t\t\tsuccess: '‚úÖ Authorization successful! Your overlay is ready.',\n\t\t\terror_no_client_id: '‚ö†Ô∏è Central Client ID not configured. Please contact the developer.',\n\t\t\terror_auth_failed: 'Authorization failed. Please try again.',\n\t\t\terror_no_chatroom: 'No chatroom found for this channel. Make sure you have streaming permissions.',\n\t\t\tloading: 'üîÑ Connecting to Kick...',\n\t\t\tcopied: '‚úÖ Copied!'\n\t\t}\n\t},\n\t\n\t// OBS Integration settings\n\tOBS_CONFIG: {\n\t\tdefault_width: 1920,\n\t\tdefault_height: 1080,\n\t\tsource_name: 'Kick Drop Game',\n\t\tdeep_link_protocol: 'obs://'\n\t}\n};\n\n// PKCE helper functions\nfunction generateRandomString(length: number): string {\n\tconst charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';\n\tlet result = '';\n\tfor (let i = 0; i < length; i++) {\n\t\tresult += charset.charAt(Math.floor(Math.random() * charset.length));\n\t}\n\treturn result;\n}\n\nasync function sha256(plain: string): Promise<ArrayBuffer> {\n\tconst encoder = new TextEncoder();\n\tconst data = encoder.encode(plain);\n\treturn await crypto.subtle.digest('SHA-256', data);\n}\n\nfunction base64URLEncode(buffer: ArrayBuffer): string {\n\tconst bytes = new Uint8Array(buffer);\n\tlet binary = '';\n\tfor (let i = 0; i < bytes.byteLength; i++) {\n\t\tbinary += String.fromCharCode(bytes[i]);\n\t}\n\treturn btoa(binary)\n\t\t.replace(/\\+/g, '-')\n\t\t.replace(/\\//g, '_')\n\t\t.replace(/=/g, '');\n}\n\nexport async function generatePKCE(): Promise<{ codeVerifier: string; codeChallenge: string }> {\n\tconst codeVerifier = generateRandomString(128);\n\tconst hashed = await sha256(codeVerifier);\n\tconst codeChallenge = base64URLEncode(hashed);\n\treturn { codeVerifier, codeChallenge };\n}\n\n// Helper function to check if central config is properly set up\nexport function isCentralConfigValid(): boolean {\n\treturn CENTRAL_OAUTH_CONFIG.CLIENT_ID !== 'YOUR_CENTRAL_CLIENT_ID_HERE' &&\n\t\t   CENTRAL_OAUTH_CONFIG.CLIENT_ID.length > 0;\n}\n\n// Helper function to build OAuth URL with PKCE\nexport async function buildCentralOAuthUrl(redirectUri: string): Promise<string> {\n\tif (!isCentralConfigValid()) {\n\t\tthrow new Error('Central Client ID not configured');\n\t}\n\n\t// Generate PKCE parameters\n\tconst { codeVerifier, codeChallenge } = await generatePKCE();\n\n\t// Store code verifier in session storage for later use\n\tsessionStorage.setItem('kick_oauth_code_verifier', codeVerifier);\n\n\t// Generate state parameter for security\n\tconst state = generateRandomString(32);\n\tsessionStorage.setItem('kick_oauth_state', state);\n\n\tconst params = new URLSearchParams({\n\t\tclient_id: CENTRAL_OAUTH_CONFIG.CLIENT_ID,\n\t\tredirect_uri: redirectUri,\n\t\tresponse_type: CENTRAL_OAUTH_CONFIG.OAUTH_SETTINGS.response_type,\n\t\tscope: CENTRAL_OAUTH_CONFIG.OAUTH_SETTINGS.scope,\n\t\tcode_challenge: codeChallenge,\n\t\tcode_challenge_method: 'S256',\n\t\tstate: state\n\t});\n\n\treturn `${CENTRAL_OAUTH_CONFIG.OAUTH_SETTINGS.authorize_url}?${params.toString()}`;\n}\n\n// Helper function to exchange authorization code for access token via proxy\nexport async function exchangeCodeForToken(code: string, redirectUri: string): Promise<string> {\n\tconsole.log('üîÑ Starting token exchange via proxy...');\n\tconsole.log('Code:', code);\n\tconsole.log('Redirect URI:', redirectUri);\n\n\tconst codeVerifier = sessionStorage.getItem('kick_oauth_code_verifier');\n\tconsole.log('Code verifier found:', !!codeVerifier);\n\n\tif (!codeVerifier) {\n\t\tthrow new Error('Code verifier not found in session storage');\n\t}\n\n\tconst requestBody = {\n\t\tcode: code,\n\t\tredirect_uri: redirectUri,\n\t\tcode_verifier: codeVerifier\n\t};\n\n\tconst proxyEndpoint = window.location.hostname === 'localhost'\n\t\t? `${CENTRAL_OAUTH_CONFIG.OAUTH_SETTINGS.proxy_url}/oauth/exchange`\n\t\t: `${CENTRAL_OAUTH_CONFIG.OAUTH_SETTINGS.proxy_url}/oauth-exchange`;\n\n\tconsole.log('Proxy request body:', requestBody);\n\tconsole.log('Proxy endpoint:', proxyEndpoint);\n\n\tconst response = await fetch(proxyEndpoint, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(requestBody)\n\t});\n\n\tconsole.log('Proxy response status:', response.status);\n\tconsole.log('Proxy response headers:', Object.fromEntries(response.headers.entries()));\n\n\tif (!response.ok) {\n\t\tconst responseText = await response.text();\n\t\tconsole.error('Proxy token exchange error response:', responseText);\n\n\t\t// Try to parse as JSON, fallback to text\n\t\tlet errorMessage = responseText;\n\t\ttry {\n\t\t\tconst errorData = JSON.parse(responseText);\n\t\t\terrorMessage = errorData.error || errorData.details || responseText;\n\t\t} catch (e) {\n\t\t\t// Response is not JSON, use as-is\n\t\t}\n\n\t\tthrow new Error(`Token exchange failed: ${response.status} - ${errorMessage}`);\n\t}\n\n\t// Check if response is actually JSON\n\tconst contentType = response.headers.get('content-type');\n\tif (!contentType || !contentType.includes('application/json')) {\n\t\tconst responseText = await response.text();\n\t\tconsole.error('Non-JSON response from proxy:', responseText.substring(0, 200));\n\t\tthrow new Error(`Expected JSON response but got: ${contentType}. Response: ${responseText.substring(0, 200)}`);\n\t}\n\n\tconst data = await response.json();\n\tconsole.log('Token exchange successful via proxy');\n\n\t// Clean up session storage\n\tsessionStorage.removeItem('kick_oauth_code_verifier');\n\tsessionStorage.removeItem('kick_oauth_state');\n\n\treturn data.access_token;\n}\n\n// Test function to verify Netlify functions are working\nexport async function testNetlifyFunction(): Promise<boolean> {\n\ttry {\n\t\tconst testEndpoint = window.location.hostname === 'localhost'\n\t\t\t? 'http://localhost:3001/test'\n\t\t\t: `${window.location.origin}/.netlify/functions/test`;\n\n\t\tconsole.log('Testing Netlify function at:', testEndpoint);\n\n\t\tconst response = await fetch(testEndpoint, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t}\n\t\t});\n\n\t\tconsole.log('Test response status:', response.status);\n\t\tconsole.log('Test response headers:', Object.fromEntries(response.headers.entries()));\n\n\t\tif (!response.ok) {\n\t\t\tconst errorText = await response.text();\n\t\t\tconsole.error('Test function error:', errorText);\n\t\t\treturn false;\n\t\t}\n\n\t\tconst data = await response.json();\n\t\tconsole.log('Test function response:', data);\n\t\treturn true;\n\t} catch (error) {\n\t\tconsole.error('Test function failed:', error);\n\t\treturn false;\n\t}\n}\n\n\n\n// Helper function to get user info from Kick API\nexport async function fetchKickUserInfo(accessToken: string): Promise<any> {\n\ttry {\n\t\tconsole.log('üîÑ Fetching user info from Kick API...');\n\t\tconsole.log('Access token:', accessToken ? 'YES' : 'NO');\n\n\t\t// Try multiple API endpoints as Kick API structure might vary\n\t\tconst endpoints = [\n\t\t\t'https://api.kick.com/public/v1/users', // New official API\n\t\t\t`${CENTRAL_OAUTH_CONFIG.OAUTH_SETTINGS.api_base}/user`,\n\t\t\t'https://kick.com/api/v1/user',\n\t\t\t'https://kick.com/api/v2/user/me',\n\t\t\t'https://kick.com/api/v1/user/me'\n\t\t];\n\n\t\tlet lastError: Error | null = null;\n\n\t\tfor (const endpoint of endpoints) {\n\t\t\ttry {\n\t\t\t\tconsole.log('Trying API endpoint:', endpoint);\n\n\t\t\t\tconst response = await fetch(endpoint, {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Authorization': `Bearer ${accessToken}`,\n\t\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tconsole.log(`API response status for ${endpoint}:`, response.status);\n\t\t\t\tconsole.log('API response headers:', Object.fromEntries(response.headers.entries()));\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tconst errorText = await response.text();\n\t\t\t\t\tconsole.error(`API error response from ${endpoint}:`, errorText);\n\t\t\t\t\tlastError = new Error(`API request failed: ${response.status} - ${errorText}`);\n\t\t\t\t\tcontinue; // Try next endpoint\n\t\t\t\t}\n\n\t\t\t\t// Check if response is actually JSON\n\t\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\t\tconsole.log('Response content-type:', contentType);\n\n\t\t\t\tif (!contentType || !contentType.includes('application/json')) {\n\t\t\t\t\tconst responseText = await response.text();\n\t\t\t\t\tconsole.error(`Non-JSON response from ${endpoint}:`, responseText.substring(0, 200));\n\t\t\t\t\tlastError = new Error(`Expected JSON response but got: ${contentType}. Response: ${responseText.substring(0, 200)}`);\n\t\t\t\t\tcontinue; // Try next endpoint\n\t\t\t\t}\n\n\t\t\t\tconst userData = await response.json();\n\t\t\t\tconsole.log('User data received from', endpoint, ':', userData);\n\n\t\t\t\t// Handle new API format vs old API format\n\t\t\t\tif (endpoint.includes('api.kick.com/public/v1/users')) {\n\t\t\t\t\t// New API returns data in array format\n\t\t\t\t\tif (userData.data && Array.isArray(userData.data) && userData.data.length > 0) {\n\t\t\t\t\t\tconst user = userData.data[0];\n\t\t\t\t\t\tconsole.log('üîÑ Getting chatroom ID for user:', user.name);\n\n\t\t\t\t\t\t// Get chatroom ID from old API\n\t\t\t\t\t\tlet chatroomId = null;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst channelResponse = await fetch(`https://kick.com/api/v1/channels/${user.name}`, {\n\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (channelResponse.ok) {\n\t\t\t\t\t\t\t\tconst channelData = await channelResponse.json();\n\t\t\t\t\t\t\t\tchatroomId = channelData.chatroom?.id;\n\t\t\t\t\t\t\t\tconsole.log('Chatroom ID found:', chatroomId);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tconsole.warn('Could not get chatroom ID:', error);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Convert to old format for compatibility\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid: user.user_id,\n\t\t\t\t\t\t\tusername: user.name,\n\t\t\t\t\t\t\temail: user.email,\n\t\t\t\t\t\t\tprofile_picture: user.profile_picture,\n\t\t\t\t\t\t\tchatroom: { id: chatroomId }\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn userData;\n\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`Error with endpoint ${endpoint}:`, error);\n\t\t\t\tlastError = error instanceof Error ? error : new Error(String(error));\n\t\t\t\tcontinue; // Try next endpoint\n\t\t\t}\n\t\t}\n\n\t\t// If we get here, all endpoints failed\n\t\tthrow lastError || new Error('All API endpoints failed');\n\n\t} catch (error) {\n\t\tconsole.error('Failed to fetch user info:', error);\n\t\tthrow error;\n\t}\n}"],"names":["CENTRAL_OAUTH_CONFIG","generateRandomString","length","charset","result","i","sha256","plain","data","base64URLEncode","buffer","bytes","binary","generatePKCE","codeVerifier","hashed","codeChallenge","isCentralConfigValid","buildCentralOAuthUrl","redirectUri","state","params","exchangeCodeForToken","code","requestBody","proxyEndpoint","response","responseText","errorMessage","errorData","contentType","testNetlifyFunction","testEndpoint","errorText","error","fetchKickUserInfo","accessToken","endpoints","lastError","endpoint","userData","user","chatroomId","channelResponse"],"mappings":"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"}