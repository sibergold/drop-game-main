const c={CLIENT_ID:"01JZWNP6AVSWRZSN7X648B1AQ2",OAUTH_SETTINGS:{response_type:"code",scope:"chat:read chat:write user:read channel:read",authorize_url:"https://id.kick.com/oauth/authorize",token_url:"https://id.kick.com/oauth/token",api_base:"https://kick.com/api/v2",proxy_url:{}.VITE_OAUTH_PROXY_URL||(window.location.hostname==="localhost"?"http://localhost:3001":`${window.location.origin}/.netlify/functions`)},DEFAULT_GAME_SETTINGS:{gravity:400,gravity_chute:60,max_velocity:600,wait:60},UI_CONFIG:{theme:{primary_color:"#00ff88",secondary_color:"#9146ff",gradient:"linear-gradient(135deg, #667eea 0%, #764ba2 100%)"},messages:{success:"‚úÖ Authorization successful! Your overlay is ready.",error_no_client_id:"‚ö†Ô∏è Central Client ID not configured. Please contact the developer.",error_auth_failed:"Authorization failed. Please try again.",error_no_chatroom:"No chatroom found for this channel. Make sure you have streaming permissions.",loading:"üîÑ Connecting to Kick...",copied:"‚úÖ Copied!"}},OBS_CONFIG:{default_width:1920,default_height:1080,source_name:"Kick Drop Game",deep_link_protocol:"obs://"}};function u(n){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";let o="";for(let e=0;e<n;e++)o+=t.charAt(Math.floor(Math.random()*t.length));return o}async function d(n){const o=new TextEncoder().encode(n);return await crypto.subtle.digest("SHA-256",o)}function p(n){const t=new Uint8Array(n);let o="";for(let e=0;e<t.byteLength;e++)o+=String.fromCharCode(t[e]);return btoa(o).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}async function _(){const n=u(128),t=await d(n),o=p(t);return{codeVerifier:n,codeChallenge:o}}function f(){return c.CLIENT_ID!=="YOUR_CENTRAL_CLIENT_ID_HERE"&&c.CLIENT_ID.length>0}async function m(n){if(!f())throw new Error("Central Client ID not configured");const{codeVerifier:t,codeChallenge:o}=await _();sessionStorage.setItem("kick_oauth_code_verifier",t);const e=u(32);sessionStorage.setItem("kick_oauth_state",e);const r=new URLSearchParams({client_id:c.CLIENT_ID,redirect_uri:n,response_type:c.OAUTH_SETTINGS.response_type,scope:c.OAUTH_SETTINGS.scope,code_challenge:o,code_challenge_method:"S256",state:e});return`${c.OAUTH_SETTINGS.authorize_url}?${r.toString()}`}async function y(n,t){console.log("üîÑ Starting token exchange via proxy..."),console.log("Code:",n),console.log("Redirect URI:",t);const o=sessionStorage.getItem("kick_oauth_code_verifier");if(console.log("Code verifier found:",!!o),!o)throw new Error("Code verifier not found in session storage");const e={code:n,redirect_uri:t,code_verifier:o};console.log("Proxy request body:",e),console.log("Proxy endpoint:",r);const r=window.location.hostname==="localhost"?`${c.OAUTH_SETTINGS.proxy_url}/oauth/exchange`:`${c.OAUTH_SETTINGS.proxy_url}/oauth-exchange`,s=await fetch(r,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(console.log("Proxy response status:",s.status),!s.ok){const a=await s.json().catch(()=>({error:"Unknown error"}));throw console.error("Proxy token exchange error:",a),new Error(`Token exchange failed: ${s.status} - ${a.error||"Unknown error"}`)}const i=await s.json();return console.log("Token exchange successful via proxy"),sessionStorage.removeItem("kick_oauth_code_verifier"),sessionStorage.removeItem("kick_oauth_state"),i.access_token}async function k(n){try{console.log("üîÑ Fetching user info from Kick API..."),console.log("Access token:",n?"YES":"NO");const t=["https://api.kick.com/public/v1/users",`${c.OAUTH_SETTINGS.api_base}/user`,"https://kick.com/api/v1/user","https://kick.com/api/v2/user/me","https://kick.com/api/v1/user/me"];let o=null;for(const e of t)try{console.log("Trying API endpoint:",e);const r=await fetch(e,{headers:{Authorization:`Bearer ${n}`,Accept:"application/json","Content-Type":"application/json"}});if(console.log(`API response status for ${e}:`,r.status),console.log("API response headers:",Object.fromEntries(r.headers.entries())),!r.ok){const a=await r.text();console.error(`API error response from ${e}:`,a),o=new Error(`API request failed: ${r.status} - ${a}`);continue}const s=r.headers.get("content-type");if(console.log("Response content-type:",s),!s||!s.includes("application/json")){const a=await r.text();console.error(`Non-JSON response from ${e}:`,a.substring(0,200)),o=new Error(`Expected JSON response but got: ${s}. Response: ${a.substring(0,200)}`);continue}const i=await r.json();if(console.log("User data received from",e,":",i),e.includes("api.kick.com/public/v1/users")&&i.data&&Array.isArray(i.data)&&i.data.length>0){const a=i.data[0];console.log("üîÑ Getting chatroom ID for user:",a.name);let h=null;try{const l=await fetch(`https://kick.com/api/v1/channels/${a.name}`,{headers:{Accept:"application/json","Content-Type":"application/json"}});l.ok&&(h=(await l.json()).chatroom?.id,console.log("Chatroom ID found:",h))}catch(l){console.warn("Could not get chatroom ID:",l)}return{id:a.user_id,username:a.name,email:a.email,profile_picture:a.profile_picture,chatroom:{id:h}}}return i}catch(r){console.error(`Error with endpoint ${e}:`,r),o=r instanceof Error?r:new Error(String(r));continue}throw o||new Error("All API endpoints failed")}catch(t){throw console.error("Failed to fetch user info:",t),t}}export{c as C,m as b,y as e,k as f,f as i};
//# sourceMappingURL=central-config-c9014553.js.map
