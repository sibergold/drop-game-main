{"version":3,"file":"streamlined-oauth-92b496ef.js","sources":["../../central-config.ts"],"sourcesContent":["// Central OAuth Configuration\r\n// This file contains the centralized settings for streamlined OAuth\r\n\r\nexport const CENTRAL_OAUTH_CONFIG = {\r\n\t// Replace this with your actual centralized Kick application Client ID\r\n\t// This should be a single application that all streamers will use\r\n\tCLIENT_ID: import.meta.env.VITE_CENTRAL_CLIENT_ID || import.meta.env.CENTRAL_CLIENT_ID || 'YOUR_CENTRAL_CLIENT_ID_HERE',\r\n\t\r\n\t// OAuth settings\r\n\tOAUTH_SETTINGS: {\r\n\t\tresponse_type: 'token', // Using implicit flow for client-side simplicity\r\n\t\tscope: 'chat:read chat:write',\r\n\t\tauthorize_url: import.meta.env.VITE_KICK_OAUTH_BASE_URL || 'https://kick.com/oauth2/authorize',\r\n\t\tapi_base: import.meta.env.VITE_KICK_API_BASE_URL || 'https://kick.com/api/v2'\r\n\t},\r\n\t\r\n\t// Default game settings that streamers can override\r\n\tDEFAULT_GAME_SETTINGS: {\r\n\t\tgravity: 400,\r\n\t\tgravity_chute: 60,\r\n\t\tmax_velocity: 600,\r\n\t\twait: 60\r\n\t},\r\n\t\r\n\t// UI Configuration\r\n\tUI_CONFIG: {\r\n\t\ttheme: {\r\n\t\t\tprimary_color: '#00ff88',\r\n\t\t\tsecondary_color: '#9146ff',\r\n\t\t\tgradient: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'\r\n\t\t},\r\n\t\tmessages: {\r\n\t\t\tsuccess: '✅ Authorization successful! Your overlay is ready.',\r\n\t\t\terror_no_client_id: '⚠️ Central Client ID not configured. Please contact the developer.',\r\n\t\t\terror_auth_failed: 'Authorization failed. Please try again.',\r\n\t\t\terror_no_chatroom: 'No chatroom found for this channel. Make sure you have streaming permissions.',\r\n\t\t\tloading: '🔄 Connecting to Kick...',\r\n\t\t\tcopied: '✅ Copied!'\r\n\t\t}\r\n\t},\r\n\t\r\n\t// OBS Integration settings\r\n\tOBS_CONFIG: {\r\n\t\tdefault_width: 1920,\r\n\t\tdefault_height: 1080,\r\n\t\tsource_name: 'Kick Drop Game',\r\n\t\tdeep_link_protocol: 'obs://'\r\n\t}\r\n};\r\n\r\n// Helper function to check if central config is properly set up\r\nexport function isCentralConfigValid(): boolean {\r\n\treturn CENTRAL_OAUTH_CONFIG.CLIENT_ID !== 'YOUR_CENTRAL_CLIENT_ID_HERE' && \r\n\t\t   CENTRAL_OAUTH_CONFIG.CLIENT_ID.length > 0;\r\n}\r\n\r\n// Helper function to build OAuth URL\r\nexport function buildCentralOAuthUrl(redirectUri: string): string {\r\n\tif (!isCentralConfigValid()) {\r\n\t\tthrow new Error('Central Client ID not configured');\r\n\t}\r\n\t\r\n\tconst params = new URLSearchParams({\r\n\t\tclient_id: CENTRAL_OAUTH_CONFIG.CLIENT_ID,\r\n\t\tredirect_uri: redirectUri,\r\n\t\tresponse_type: CENTRAL_OAUTH_CONFIG.OAUTH_SETTINGS.response_type,\r\n\t\tscope: CENTRAL_OAUTH_CONFIG.OAUTH_SETTINGS.scope\r\n\t});\r\n\t\r\n\treturn `${CENTRAL_OAUTH_CONFIG.OAUTH_SETTINGS.authorize_url}?${params.toString()}`;\r\n}\r\n\r\n// Helper function to get user info from Kick API\r\nexport async function fetchKickUserInfo(accessToken: string): Promise<any> {\r\n\ttry {\r\n\t\tconst response = await fetch(`${CENTRAL_OAUTH_CONFIG.OAUTH_SETTINGS.api_base}/user`, {\r\n\t\t\theaders: {\r\n\t\t\t\t'Authorization': `Bearer ${accessToken}`,\r\n\t\t\t\t'Accept': 'application/json'\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (!response.ok) {\r\n\t\t\tthrow new Error(`API request failed: ${response.status}`);\r\n\t\t}\r\n\r\n\t\treturn await response.json();\r\n\t} catch (error) {\r\n\t\tconsole.error('Failed to fetch user info:', error);\r\n\t\tthrow error;\r\n\t}\r\n}"],"names":["CENTRAL_OAUTH_CONFIG","isCentralConfigValid"],"mappings":"AAGO,MAAMA,EAAuB,CAGnC,UAA2B,CAAA,EAAA,wBAA0C,CAAA,EAAA,mBAAqB,8BAG1F,eAAgB,CACf,cAAe,QACf,MAAO,uBACP,cAA+B,GAAA,0BAA4B,oCAC3D,SAA0B,GAAA,wBAA0B,yBACrD,EAGA,sBAAuB,CACtB,QAAS,IACT,cAAe,GACf,aAAc,IACd,KAAM,EACP,EAGA,UAAW,CACV,MAAO,CACN,cAAe,UACf,gBAAiB,UACjB,SAAU,mDACX,EACA,SAAU,CACT,QAAS,qDACT,mBAAoB,qEACpB,kBAAmB,0CACnB,kBAAmB,gFACnB,QAAS,2BACT,OAAQ,WACT,CACD,EAGA,WAAY,CACX,cAAe,KACf,eAAgB,KAChB,YAAa,iBACb,mBAAoB,QACrB,CACD,EAGO,SAASC,GAAgC,CAC/C,OAAOD,EAAqB,YAAc,+BACtCA,EAAqB,UAAU,OAAS,CAC7C"}